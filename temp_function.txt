  /**
   * الحصول على أداء الكاشير حسب الفرع والتاريخ
   * إذا كان branchId = 0، فسيتم عرض أداء جميع الكاشيرين من جميع الفروع
   * @param branchId معرف الفرع (0 لجميع الفروع)
   * @param date التاريخ
   */
  async getCashierPerformance(branchId: number, date: Date): Promise<any[]> {
    const formattedDate = format(date, "yyyy-MM-dd");
    let cashiers = [];
    
    // إذا كان branchId يساوي 0، نجلب جميع الكاشيرين من جميع الفروع
    if (branchId === 0) {
      cashiers = (await this.getUsers()).filter(user => user.role === "cashier");
    } else {
      // فلترة الكاشيرين حسب الفرع المحدد
      cashiers = (await this.getUsers()).filter(user => user.role === "cashier" && user.branchId === branchId);
    }
    
    const results = [];
    
    for (const cashier of cashiers) {
      const salesData = await this.getDailySalesByCashierAndDate(cashier.id, formattedDate);
      
      if (salesData) {
        // إضافة معلومات الفرع للعرض التجميعي عندما يكون branchId = 0
        const branch = await this.getBranch(salesData.branchId);
        
        results.push({
          cashierId: cashier.id,
          name: cashier.name,
          avatar: cashier.avatar,
          // إضافة اسم الفرع عندما يكون branchId = 0 (عرض كل الفروع)
          branchId: salesData.branchId,
          branchName: branchId === 0 ? (branch?.name || "") : undefined,
          shiftStart: salesData.shiftStart,
          shiftEnd: salesData.shiftEnd,
          totalSales: salesData.totalSales,
          discrepancy: salesData.discrepancy || 0,
          totalTransactions: salesData.totalTransactions,
          averageTicket: salesData.averageTicket,
          performance: salesData.discrepancy === 0 ? 100 : salesData.discrepancy < 0 ? 85 : 90
        });
      }
    }
    
    // ترتيب النتائج حسب المبيعات (تنازليًا)
    results.sort((a, b) => b.totalSales - a.totalSales);
    
    return results;
  }